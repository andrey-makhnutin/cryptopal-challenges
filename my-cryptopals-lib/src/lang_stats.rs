// This ASCII symbol frequency table was generated by running
// char-frequency-analyzer learning-data/wbw-the-story-of-us.txt
// The table does not include characters below 0x20 (space) and above 0x60 (grave / accent)
const ENGLISH_F_TABLE: &[f32] = &[
    // ' '     '!'     '"'     '#'     '$'     '%'     '&'     '''     '('     ')'
    0.1680, 0.0000, 0.0000, 0.0000, 0.0000, 0.0001, 0.0000, 0.0000, 0.0002, 0.0003,
    // '*'     '+'     ','     '-'     '.'     '/'     '0'     '1'     '2'     '3'
    0.0000, 0.0000, 0.0088, 0.0020, 0.0084, 0.0001, 0.0006, 0.0005, 0.0003, 0.0002,
    // '4'     '5'     '6'     '7'     '8'     '9'     ':'     ';'     '<'     '='
    0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0002, 0.0009, 0.0001, 0.0000, 0.0000,
    // '>'     '?'     '@'     'A'     'B'     'C'     'D'     'E'     'F'     'G'
    0.0000, 0.0003, 0.0000, 0.0599, 0.0127, 0.0233, 0.0259, 0.0980, 0.0157, 0.0187,
    // 'H'     'I'     'J'     'K'     'L'     'M'     'N'     'O'     'P'     'Q'
    0.0411, 0.0636, 0.0010, 0.0067, 0.0350, 0.0200, 0.0565, 0.0608, 0.0175, 0.0006,
    // 'R'     'S'     'T'     'U'     'V'     'W'     'X'     'Y'     'Z'     '['
    0.0463, 0.0513, 0.0772, 0.0247, 0.0092, 0.0164, 0.0015, 0.0162, 0.0009, 0.0000,
    // '\'     ']'     '^'     '_'     '`'
    0.0000, 0.0000, 0.0000, 0.0004, 0.0000,
];

pub fn compute_english_score(text: &str) -> f64 {
    let mut stat = [0f32; 0x60 - 0x20 + 1];
    let mut buf: [u16; 2] = [0u16; 2];
    let mut char_count = 0;
    for c in text.chars() {
        c.encode_utf16(&mut buf);
        if buf[1] == 0 && buf[0] <= 0x60 && buf[0] >= 0x20 {
            stat[(buf[0] - 0x20) as usize] += 1f32;
        }
        char_count += 1;
    }
    let mut score = 0f64;
    for n in 0..(0x60 - 0x20 + 1) {
        let fq = stat[n] / char_count as f32;
        score += (ENGLISH_F_TABLE[n] - fq).powi(2) as f64;
    }

    score
}
