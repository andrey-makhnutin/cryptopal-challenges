use std::collections::HashSet;
use crate::syllables::split_into_syllables;
use crate::eng_syllables::{SYLLABLES};

pub fn compute_english_score(text: &str) -> f64 {
    compute_english_syllables_score(text)
        * compute_english_letters_score(text)
}

pub fn compute_english_syllables_score(text: &str) -> f64 {
    let mut score = 0.0;
    let syllables = split_into_syllables(&text);
    let mut uniq_syllables = HashSet::new();

    for syl in &syllables {
        let syl = syl.to_uppercase();
        let syl_ref = &syl[..];
        if let Some(count) = SYLLABLES.get(syl_ref) {
            if syl.len() > 1 {
                uniq_syllables.insert(syl.clone());
            }
            score += f64::log10(*count as f64);
        }
    }

    score * uniq_syllables.len().max(1) as f64 / syllables.len() as f64
}

// This ASCII symbol frequency table was generated by running
// char-frequency-analyzer learning-data/wbw-the-story-of-us.txt
// The table does not include characters below 0x20 (space) and above 0x60 (grave / accent)
const ENGLISH_F_TABLE: &[f64] = &[
    // ' '      '!'      '"'      '#'      '$'      '%'      '&'      '''      '('      ')'
    0.16802, 0.00002, 0.00000, 0.00001, 0.00001, 0.00007, 0.00000, 0.00005, 0.00021, 0.00028,
    // '*'      '+'      ','      '-'      '.'      '/'      '0'      '1'      '2'      '3'
    0.00000, 0.00001, 0.00875, 0.00204, 0.00842, 0.00011, 0.00061, 0.00051, 0.00032, 0.00017,
    // '4'      '5'      '6'      '7'      '8'      '9'      ':'      ';'      '<'      '='
    0.00011, 0.00014, 0.00009, 0.00010, 0.00012, 0.00016, 0.00086, 0.00008, 0.00000, 0.00001,
    // '>'      '?'      '@'      'A'      'B'      'C'      'D'      'E'      'F'      'G'
    0.00001, 0.00035, 0.00000, 0.05987, 0.01273, 0.02326, 0.02589, 0.09797, 0.01566, 0.01866,
    // 'H'      'I'      'J'      'K'      'L'      'M'      'N'      'O'      'P'      'Q'
    0.04107, 0.06364, 0.00100, 0.00666, 0.03498, 0.02002, 0.05655, 0.06075, 0.01747, 0.00059,
    // 'R'      'S'      'T'      'U'      'V'      'W'      'X'      'Y'      'Z'      '['
    0.04630, 0.05125, 0.07719, 0.02466, 0.00917, 0.01639, 0.00147, 0.01620, 0.00093, 0.00001,
    // '\'      ']'      '^'      '_'      '`'
    0.00000, 0.00001, 0.00000, 0.00038, 0.00000,
];

pub fn compute_english_letters_score(text: &str) -> f64 {
    let mut stat = 0.0;
    let mut buf: [u16; 2] = [0u16; 2];
    for mut c in text.chars() {
        if c.is_whitespace() {
            c = ' ';
        }
        let uc_str = c.to_uppercase().to_string();
        let uc_chars: Vec<char> = uc_str.chars().collect();
        uc_chars[0].encode_utf16(&mut buf);
        if uc_chars.len() == 1 && buf[1] == 0 {
            if buf[0] <= 0x60 && buf[0] >= 0x20 {
                let table_index = buf[0] - 0x20;
                let mut score = ENGLISH_F_TABLE[table_index as usize];
                if uc_chars[0] == c {
                    score *= 0.02;
                }
                stat += score;
            } else {
                if buf[0] < 0x20 || buf[0] >= 0x7F {
                    stat *= 0.1;
                }
            }
        }
    }
    stat / text.len() as f64
}
