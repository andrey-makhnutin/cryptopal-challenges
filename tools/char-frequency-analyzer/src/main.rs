use std::env;
use std::fs;
use std::collections::HashMap;

fn main() -> Result<(), String> {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        return Err("expected file path argument".into());
    }
    let file_contents = fs::read_to_string(&args[1]).or_else(|err| {
        Err(format!("Failed to read file: {}", err))
    })?;
    let stats = calc_stats(&file_contents);
    //if is_ascii_lang(&stats) {
        print_ascii_stats(&args[1], &stats);
    //} else {
    //    todo!("Print non-ASCII language")
    //}

    Ok(())
}

fn calc_stats(text: &str) -> HashMap<String, f64> {
    let mut result: HashMap<String, f64> = HashMap::new();
    let mut in_whitespace = false;
    let mut char_count = 0u32;
    let mut uc_cache: HashMap<char, String> = HashMap::new();
    let mut ws_skips = 0;
    for c in text.chars() {
        let char = if c.is_whitespace() {
            if in_whitespace {
                ws_skips += 1;
                continue;
            }
            in_whitespace = true;
            ' '
        } else {
            in_whitespace = false;
            c
        };
        if !uc_cache.contains_key(&char) {
            let uc_char = char.to_uppercase().to_string();
            uc_cache.insert(char, uc_char);
        }
        let uc = uc_cache.get(&char).unwrap();
        if !result.contains_key(uc) {
            result.insert(uc.to_owned(), 0f64);
        }
        let stat = result.get_mut(uc).unwrap();
        *stat += 1f64;
        char_count += 1;
    }
    println!("chars: {}, ws_skips: {}", char_count, ws_skips);
    for v in result.values_mut() {
        *v /= char_count as f64;
    }
    result
}

fn is_ascii_lang(stats: &HashMap<String, f64>) -> bool {
    for k in stats.keys() {
        if k.len() > 1 || !k.is_ascii() {
            return false;
        }
    }
    true
}

fn print_ascii_stats(filename: &str, stats: &HashMap<String, f64>) {
    println!("// This ASCII symbol frequency table was generated by running");
    println!("// char-frequency-analyzer {}", filename);
    println!("// The table does not include characters below 0x20 (space) and above 0x60 (grave / accent)");
    println!("const F_TABLE: &[f64] = &[");
    let mut comment_line = String::from("    // ");
    let mut data_line = String::from("    ");
    let mut numbers_on_line = 0;
    for n in 0x20 ..= 0x60 {
        let c_str = char::from_u32(n).unwrap().to_string();
        comment_line.push_str(&format!("'{}'      ", c_str));
        let frequency = if let Some(f) = stats.get(&c_str) {
            f
        } else {
            &0f64
        };
        data_line.push_str(&format!("{:.5}, ", *frequency));
        numbers_on_line += 1;
        if numbers_on_line == 10 {
            println!("{}\n{}", comment_line, data_line);
            comment_line = String::from("    // ");
            data_line = String::from("    ");
            numbers_on_line = 0;
        }
    }
    if numbers_on_line > 0 {
        println!("{}\n{}", comment_line, data_line);
    }
    println!("];");
}
