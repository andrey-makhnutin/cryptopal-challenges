use std::env;
use std::fs;
use std::collections::HashMap;
use std::io;
use std::io::Write;
use my_cryptopals_lib::syllables::split_into_syllables;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    let mut filename: Option<String> = None;
    let text = if args.len() < 2 {
        print!("Enter text: ");
        io::stdout().flush()?;

        let mut text = String::new();
        io::stdin().read_line(&mut text)?;
        text
    } else {
        filename = Some(args[1].clone());
        fs::read_to_string(&args[1]).or_else(|err| {
            Err(format!("Failed to read file: {}", err))
        })?
    };

    let syllables = split_into_syllables(&text);
    let syl_stats = calc_stats(&syllables);
    print_stats(&syl_stats, &filename);

    Ok(())
}

fn calc_stats(syllables: &Vec<String>) -> HashMap<String, u32> {
    let mut out = HashMap::new();

    for syl in syllables {
        let syl = syl.to_uppercase();
        let entry = out.entry(syl).or_insert(0);
        *entry += 1;
    }

    out
}

fn print_stats(syllables: &HashMap<String, u32>, filename: &Option<String>) {
    let mut keys: Vec<&String> = syllables.keys().collect();
    keys.sort();
    keys.sort_by_key(|&k| -1 * (*syllables.get(k).unwrap() as i32));
    if let Some(filename) = filename {
        println!("use phf::phf_map;\n\n// generated by tools/syllables {}", filename);
    }
    println!("pub static SYLLABLES: phf::Map<&'static str, u32> = phf_map! {{");
    let mut syl_on_the_row = 0;
    let mut data_buffer = String::new();
    for k in keys {
        data_buffer.push_str(&format!(" \"{}\" => {},", k, syllables.get(k).unwrap()));
        syl_on_the_row += 1;
        if syl_on_the_row == 8 {
            println!("   {}", data_buffer);
            data_buffer = String::new();
            syl_on_the_row = 0;
        }
    }
    if syl_on_the_row > 0 {
        println!("   {}", data_buffer);
    }
    println!("}};");
}
